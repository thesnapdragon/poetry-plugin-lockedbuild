[tool.poetry]
name = "poetry-plugin-lockedbuild"
version = "0.10.1"
description = "Poetry plugin to add support for building wheel files with locked packages from the poetry.lock"
authors = ["Milan Unicsovics <u.milan@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/thesnapdragon/poetry-plugin-lockedbuild"
repository = "https://github.com/thesnapdragon/poetry-plugin-lockedbuild"
keywords = ["python", "poetry", "poetry-plugin"]

packages = [
    { include = "poetry_plugin_lockedbuild", from = "src" }
]

include = [
    { path = "tests", format = "sdist" }
]

[tool.poetry.dependencies]
python = "^3.8"
poetry = "^1.5"

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
ruff = "*"
black = "*"
mypy = "*"
pkginfo = "*"

[tool.poetry.plugins."poetry.application.plugin"]
lockedbuild = "poetry_plugin_lockedbuild.plugins:LockedBuildPlugin"

[tool.ruff]
fix = true
unfixable = [
    "ERA", # do not autoremove commented out code
]
ignore = ["RUF012"]
target-version = "py37"
line-length = 120
extend-select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
]
extend-exclude = [
    # External to the project's coding standards
    "tests/**/fixtures/*",
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
known-first-party = ["poetry_plugin_lockedbuild"]
required-imports = ["from __future__ import annotations"]

[tool.black]
target-version = ['py37']
line-length = 120
preview = true

[tool.mypy]
namespace_packages = true
show_error_codes = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]
strict = true
files = ["src", "tests"]
exclude = ["^tests/fixtures/", "dist", "venv"]

[[tool.mypy.overrides]]
module = ['poetry_plugin_lockedbuild']
warn_unused_ignores = false

[tool.pytest.ini_options]
testpaths = ["tests"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
